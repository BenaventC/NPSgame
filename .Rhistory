# Set a seed if you want reproducible results
set.seed(42)
library(Rtsne)
tsne_out <- Rtsne(res,pca=TRUE,perplexity=2,theta=0.0) # Run TSNE
plot(tsne_out$Y)
plot(g,
vertex.color = col,
vertex.shape=shape,
vertex.label.cex=c(0.7),
vertex.label.family="TT Arial",
vertex.size=c(20),
edge.arrow.size=0,
edge.width=3*(E(g)$value),
edge.curved=0.2
)
plot(g,
vertex.color = col,
vertex.shape=NULL,
vertex.label.cex=c(0.7),
vertex.label.family="TT Arial",
vertex.size=c(20),
edge.arrow.size=0,
edge.width=3*(E(g)$value),
edge.curved=0.2
)
plot(g,
vertex.color = col,
vertex.shape=NULL,
vertex.label.cex=c(0.7),
vertex.label.family="TT Arial",
vertex.size=c(0),
edge.arrow.size=0,
edge.width=3*(E(g)$value),
edge.curved=0.2
)
plot(g,
vertex.label.color = col,
vertex.shape=NULL,
vertex.label.cex=c(0.7),
vertex.label.family="TT Arial",
vertex.size=c(0),
edge.arrow.size=0,
edge.width=3*(E(g)$value),
edge.curved=0.2
)
col = ifelse( V(g)$type, "blue", "darkolivegreen1") # assign color by node type
shape = ifelse(V(g)$type, "circle", "square") # assign shape by node type
plot(g,
vertex.label.color = col,
vertex.shape=NULL,
vertex.label.cex=c(0.7),
vertex.label.family="TT Arial",
vertex.size=c(0),
edge.arrow.size=0,
edge.width=3*(E(g)$value),
edge.curved=0.2
)
col = ifelse( V(g)$type, "blue", "darkolivegreen4") # assign color by node type
shape = ifelse(V(g)$type, "circle", "square") # assign shape by node type
plot(g,
vertex.label.color = col,
vertex.shape=NULL,
vertex.label.cex=c(0.7),
vertex.label.family="TT Arial",
vertex.size=c(0),
edge.arrow.size=0,
edge.width=3*(E(g)$value),
edge.curved=0.2
)
col = ifelse( V(g)$type, "black", "blue") # assign color by node type
shape = ifelse(V(g)$type, "circle", "square") # assign shape by node type
plot(g,
vertex.label.color = col,
vertex.shape=NULL,
vertex.label.cex=c(0.7),
vertex.label.family="TT Arial",
vertex.size=c(0),
edge.arrow.size=0,
edge.width=3*(E(g)$value),
edge.curved=0.2
)
plot(g,
vertex.label.color = col,
vertex.shape=NULL,
vertex.label.cex=c(0.7),
vertex.label.family="TT Arial",
vertex.size=c(0),
edge.arrow.size=0,
edge.width=3*(E(g)$value),
edge.curved=0.2
)
layout <- layout_with_fr(g, dim=2)
V(g)$type <- bipartite.mapping(g)$type
col = ifelse( V(g)$type, "black", "blue") # assign color by node type
shape = ifelse(V(g)$type, "circle", "square") # assign shape by node type
plot(g,
vertex.label.color = col,
vertex.shape=NULL,
vertex.label.cex=c(0.7),
vertex.label.family="TT Arial",
vertex.size=c(0),
edge.arrow.size=0,
edge.width=3*(E(g)$value),
edge.curved=0.2
)
plot(g,
vertex.label.color = col,
vertex.shape=NULL,
vertex.label.cex=c(0.7),
vertex.label.family="TT Arial",
vertex.size=lemma$n,
edge.arrow.size=0,
edge.width=3*(E(g)$value),
edge.curved=0.2
)
plot(g,
vertex.label.color = col,
vertex.shape=NULL,
vertex.label.cex=c(0.7),
vertex.label.family="TT Arial",
vertex.size=lemma,
vertex.label.cex=lemma$n,
edge.arrow.size=0,
edge.width=3*(E(g)$value),
edge.curved=0.2
)
plot(g,
vertex.label.color = col,
vertex.shape=NULL,
vertex.label.cex=c(0.7),
vertex.label.family="TT Arial",
vertex.size=c(0),
vertex.label.cex=lemma$n,
edge.arrow.size=0,
edge.width=3*(E(g)$value),
edge.curved=0.2
)
View(lemma)
plot(g,
vertex.label.color = col,
vertex.shape=NULL,
vertex.label.cex=c(0.7),
vertex.label.family="TT Arial",
vertex.size=c(0),
vertex.label.cex=10*lemma$n,
edge.arrow.size=0,
edge.width=3*(E(g)$n),
edge.curved=0.2
)
plot(g,
vertex.label.color = col,
vertex.shape=NULL,
vertex.label.cex=c(0.7),
vertex.label.family="TT Arial",
vertex.size=c(0),
vertex.label.cex=10*lemma$n,
edge.arrow.size=0,
edge.width=1*(E(g)$n),
edge.curved=0.2
)
View(res1)
res1 <-obj %>%
filter(relation == "amod")%>%
full_join(perso) %>%
select(Marque, lemma)%>% mutate(n=1)%>%
group_by(Marque, lemma)%>%
summarise(n=sum(n)) %>%drop_na()
lemma<-res1 %>% group_by(lemma)%>%summarise(n=sum(n))
#library
library(igraph)
#graphe bipartite
Edge<-res1
Edge<-subset(Edge, n>0)   #ne garder que ceux qui sont effectifs
g <- graph_from_data_frame(Edge, directed=FALSE, vertices=NULL)
layout <- layout_with_fr(g, dim=2)
V(g)$type <- bipartite.mapping(g)$type
col = ifelse( V(g)$type, "black", "blue") # assign color by node type
shape = ifelse(V(g)$type, "circle", "square") # assign shape by node type
plot(g,
vertex.label.color = col,
vertex.shape=NULL,
vertex.label.cex=c(0.7),
vertex.label.family="TT Arial",
vertex.size=c(0),
vertex.label.cex=10*lemma$n,
edge.arrow.size=0,
edge.width=1*(E(g)$n),
edge.curved=0.2
)
col = ifelse( V(g)$type, "black", "Darkblue") # assign color by node type
shape = ifelse(V(g)$type, "circle", "square") # assign shape by node type
plot(g,
vertex.label.color = col,
vertex.shape=NULL,
vertex.label.cex=c(0.7),
vertex.label.family="TT Arial",
vertex.size=c(0),
vertex.label.cex=10*lemma$n,
edge.arrow.size=0,
edge.width=1*(E(g)$n),
edge.curved=0.2
)
# Set a seed if you want reproducible results
set.seed(42)
library(Rtsne)
tsne_out <- Rtsne(res,pca=TRUE,perplexity=2,theta=0.0) # Run TSNE
plot(tsne_out$Y)
plot(g,
vertex.label.color = col,
vertex.shape=NULL,
vertex.label.cex=c(0.7),
vertex.label.family="TT Arial",
vertex.size=c(0),
vertex.label.cex=10*lemma$n,
edge.arrow.size=0,
edge.width=1*(E(g)$n),
edge.curved=0.2
)
Marque<-res1 %>% group_by(Marque)%>%summarise(n=sum(n))
size=ifelse(V(g)$type, Marque$n, lemma$n)
plot(g,
vertex.label.color = col,
vertex.shape=NULL,
vertex.label.cex=c(0.7),
vertex.label.family="TT Arial",
vertex.size=c(0),
vertex.label.cex=size,
edge.arrow.size=0,
edge.width=1*(E(g)$n),
edge.curved=0.2
)
ggsave("network.jpg", plot=last_plot(), width = 27, height = 19, units = "cm")
perso$doc_id<-as.numeric(rownames(perso))
res1 <-obj %>%
filter(relation == "amod")%>%
full_join(perso) %>%
select(Marque, lemma)%>% mutate(n=1)%>%
group_by(Marque, lemma)%>%
summarise(n=sum(n)) %>%drop_na()
#%>% spread( lemma, n)
#res1[is.na(res1)] <- 0
lemma<-res1 %>% group_by(lemma)%>%summarise(n=sum(n))
Marque<-res1 %>% group_by(Marque)%>%summarise(n=sum(n))
#library
library(igraph)
#graphe bipartite
Edge<-res1
Edge<-subset(Edge, n>0)   #ne garder que ceux qui sont effectifs
g <- graph_from_data_frame(Edge, directed=FALSE, vertices=NULL)
layout <- layout_with_fr(g, dim=2)
V(g)$type <- bipartite.mapping(g)$type
col = ifelse( V(g)$type, "black", "Darkblue") # assign color by node type
shape = ifelse(V(g)$type, "circle", "square") # assign shape by node type
size=ifelse(V(g)$type, Marque$n, lemma$n)
plot(g,
vertex.label.color = col,
vertex.shape=NULL,
vertex.label.cex=c(0.7),
vertex.label.family="TT Arial",
vertex.size=c(0),
vertex.label.cex=size,
edge.arrow.size=0,
edge.width=1*(E(g)$n),
edge.curved=0.2
)
ggsave("network.jpg", plot=last_plot(), width = 27, height = 19, units = "cm")
# Set a seed if you want reproducible results
set.seed(42)
library(Rtsne)
tsne_out <- Rtsne(res,pca=TRUE,perplexity=2,theta=0.0) # Run TSNE
plot(tsne_out$Y)
write_graph(
ng,
"ng",
format="jpg"
...
write_graph(
ng,
"ng",
format="jpg"
)
ng<-plot(g,
vertex.label.color = col,
vertex.shape=NULL,
vertex.label.cex=c(0.7),
vertex.label.family="TT Arial",
vertex.size=c(0),
vertex.label.cex=size,
edge.arrow.size=0,
edge.width=1*(E(g)$n),
edge.curved=0.2
)
write_graph(
ng,
"ng",
format="jpg"
)
perso$doc_id<-as.numeric(rownames(perso))
res1 <-obj %>%
filter(relation == "amod")%>%
full_join(perso) %>%
select(Marque, lemma)%>% mutate(n=1)%>%
group_by(Marque, lemma)%>%
summarise(n=sum(n)) %>%drop_na()
#%>% spread( lemma, n)
#res1[is.na(res1)] <- 0
lemma<-res1 %>% group_by(lemma)%>%summarise(n=sum(n))
Marque<-res1 %>% group_by(Marque)%>%summarise(n=sum(n))
#library
library(igraph)
#graphe bipartite
Edge<-res1
Edge<-subset(Edge, n>0)   #ne garder que ceux qui sont effectifs
g <- graph_from_data_frame(Edge, directed=FALSE, vertices=NULL)
layout <- layout_with_fr(g, dim=2)
V(g)$type <- bipartite.mapping(g)$type
col = ifelse( V(g)$type, "black", "Darkblue") # assign color by node type
shape = ifelse(V(g)$type, "circle", "square") # assign shape by node type
size=ifelse(V(g)$type, Marque$n, lemma$n)
png(filename="faithful.png")
ng<-plot(g,
vertex.label.color = col,
vertex.shape=NULL,
vertex.label.cex=c(0.7),
vertex.label.family="TT Arial",
vertex.size=c(0),
vertex.label.cex=size,
edge.arrow.size=0,
edge.width=1*(E(g)$n),
edge.curved=0.2
)
dev.off()
# Set a seed if you want reproducible results
set.seed(42)
library(Rtsne)
tsne_out <- Rtsne(res,pca=TRUE,perplexity=2,theta=0.0) # Run TSNE
plot(tsne_out$Y)
plot(g,
vertex.label.color = col,
vertex.shape=NULL,
vertex.label.cex=c(0.7),
vertex.label.family="TT Arial",
vertex.size=c(0),
vertex.label.cex=size,
edge.arrow.size=0,
edge.width=1*(E(g)$n),
edge.curved=0.2
)
plot(g,
vertex.label.color = col,
vertex.shape=NULL,
vertex.label.cex=c(0.7),
vertex.label.family="TT Arial",
vertex.size=c(0),
vertex.label.cex=size,
edge.arrow.size=0,
edge.width=1*(E(g)$n),
edge.curved=0.2
)
library(cleanNLP)
cnlp_init_udpipe(model_name = "french")
annotate<-cnlp_annotate(perso, text_name = "personnalite",doc_name = "id", verbose = 1000)
View(annotate)
obj<-annotate$token
View(annotate)
View(obj)
perso$doc_id<-as.numeric(rownames(perso))
res1 <-obj %>%
filter(relation == "amod")
View(res1)
res1 <-obj %>%
filter(relation == "amod") %>%
full_join(perso)
View(res1)
res1 <-obj %>%
filter(relation == "amod") %>% #selection
full_join(perso) %>%  #enrichissement
select(Marque, lemma)%>% mutate(n=1)%>% #frequence des mots par marques
group_by(Marque, lemma)%>%
summarise(n=sum(n)) %>%
drop_na()
View(res1)
res1 <-obj %>%
filter(relation == "amod") %>% #selection
full_join(perso) %>%  #enrichissement
select(Marque, lemma)%>% mutate(n=1)%>% #frequence des mots par marques
group_by(Marque, lemma)%>%
summarise(n=sum(n)) %>%
drop_na() %>%
spread(lemma, n)
View(res1)
res1 <-obj %>%
filter(relation == "amod") %>% #selection
full_join(perso) %>%  #enrichissement
select(Marque, lemma)%>% mutate(n=1)%>% #frequence des mots par marques
group_by(Marque, lemma)%>%
summarise(n=sum(n)) %>%
drop_na()
View(res1)
#library
library(igraph)
#graphe bipartite
Edge<-res1
Edge<-subset(Edge, n>0)   #ne garder que ceux qui sont effectifs
g <- graph_from_data_frame(Edge, directed=FALSE, vertices=NULL)
g <- graph_from_data_frame(Edge, directed=FALSE, vertices=NULL)
#définir les paramètres
layout <- layout_with_fr(g, dim=2)
V(g)$type <- bipartite.mapping(g)$type
col = ifelse( V(g)$type, "black", "Darkblue") # assign color by node type
shape = ifelse(V(g)$type, "circle", "square") # assign shape by node type
size=ifelse(V(g)$type, Marque$n, lemma$n)
#tracer le graphe
plot(g,
vertex.label.color = col,
vertex.shape=NULL,
vertex.label.cex=c(0.7),
vertex.label.family="TT Arial",
vertex.size=c(0),
vertex.label.cex=size,
edge.arrow.size=0,
edge.width=1*(E(g)$n),
edge.curved=0.2
)
col = ifelse( V(g)$type, "black", "Red") # assign color by node type
#tracer le graphe
plot(g,
vertex.label.color = col,
vertex.shape=NULL,
vertex.label.cex=c(0.7),
vertex.label.family="TT Arial",
vertex.size=c(0),
vertex.label.cex=size,
edge.arrow.size=0,
edge.width=1*(E(g)$n),
edge.curved=0.2
)
#définir les paramètres
layout <- layout_with_mds(g, dim=2)
V(g)$type <- bipartite.mapping(g)$type
col = ifelse( V(g)$type, "black", "Red") # assign color by node type
shape = ifelse(V(g)$type, "circle", "square") # assign shape by node type
#tracer le graphe
plot(g,
vertex.label.color = col,
vertex.shape=shape,
vertex.label.cex=0.7,
vertex.label.family="TT Arial",
vertex.size=c(0),
vertex.label.cex=size,
edge.arrow.size=0,
edge.width=1*(E(g)$n),
edge.curved=0.5
)
#definition du graphe
g <- graph_from_data_frame(Edge, directed=FALSE, vertices=NULL)
#définir les paramètres
layout <- layout_with_mds(g, dim=2)
V(g)$type <- bipartite.mapping(g)$type
col = ifelse( V(g)$type, "black", "Red") # assign color by node type
shape = ifelse(V(g)$type, "circle", "square") # assign shape by node type
size=ifelse(V(g)$type, Marque$n, lemma$n)
#tracer le graphe
plot(g,
vertex.label.color = col,
vertex.shape=shape,
vertex.label.cex=0.7,
vertex.label.family="TT Arial",
vertex.size=c(0),
vertex.label.cex=size,
edge.arrow.size=0,
edge.width=1*(E(g)$n),
edge.curved=0.5
)
#tracer le graphe
plot(g,
vertex.label.color = col,
vertex.shape=shape,
vertex.label.cex=0.7,
vertex.label.family="TT Arial",
vertex.size=c(4),
vertex.label.cex=size,
edge.arrow.size=0,
edge.width=1*(E(g)$n),
edge.curved=0.5
)
#tracer le graphe
plot(g,
vertex.label.color = col,
vertex.shape=shape,
vertex.label.cex=0.7,
vertex.label.family="TT Arial",
vertex.size=c(9),
vertex.label.cex=size,
edge.arrow.size=0,
edge.width=1*(E(g)$n),
edge.curved=0.5
)
#tracer le graphe
plot(g,
vertex.label.color = col,
vertex.shape=shape,
vertex.label.cex=0.7,
vertex.label.family="TT Arial",
vertex.size=c(0),
vertex.label.cex=size,
edge.arrow.size=0,
edge.width=1*(E(g)$n),
edge.curved=0.5
)
View(Edge)
View(Edge)
